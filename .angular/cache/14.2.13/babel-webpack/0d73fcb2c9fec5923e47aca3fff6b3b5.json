{"ast":null,"code":"/*\n * JavaScript Load Image Meta\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Image meta data handling implementation\n * based on the help and contribution of\n * Achim Stöhr.\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require, DataView, Uint8Array */\n;\n\n(function (factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'));\n  } else {\n    // Browser globals:\n    factory(window.loadImage);\n  }\n})(function (loadImage) {\n  'use strict';\n\n  var hasblobSlice = typeof Blob !== 'undefined' && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice);\n\n  loadImage.blobSlice = hasblobSlice && function () {\n    var slice = this.slice || this.webkitSlice || this.mozSlice;\n    return slice.apply(this, arguments);\n  };\n\n  loadImage.metaDataParsers = {\n    jpeg: {\n      0xffe1: [],\n      // APP1 marker\n      0xffed: [] // APP13 marker\n\n    }\n  }; // Parses image meta data and calls the callback with an object argument\n  // with the following properties:\n  // * imageHead: The complete image head as ArrayBuffer (Uint8Array for IE10)\n  // The options argument accepts an object and supports the following\n  // properties:\n  // * maxMetaDataSize: Defines the maximum number of bytes to parse.\n  // * disableImageHead: Disables creating the imageHead property.\n\n  loadImage.parseMetaData = function (file, callback, options, data) {\n    // eslint-disable-next-line no-param-reassign\n    options = options || {}; // eslint-disable-next-line no-param-reassign\n\n    data = data || {};\n    var that = this; // 256 KiB should contain all EXIF/ICC/IPTC segments:\n\n    var maxMetaDataSize = options.maxMetaDataSize || 262144;\n    var noMetaData = !(typeof DataView !== 'undefined' && file && file.size >= 12 && file.type === 'image/jpeg' && loadImage.blobSlice);\n\n    if (noMetaData || !loadImage.readFile(loadImage.blobSlice.call(file, 0, maxMetaDataSize), function (e) {\n      if (e.target.error) {\n        // FileReader error\n        // eslint-disable-next-line no-console\n        console.log(e.target.error);\n        callback(data);\n        return;\n      } // Note on endianness:\n      // Since the marker and length bytes in JPEG files are always\n      // stored in big endian order, we can leave the endian parameter\n      // of the DataView methods undefined, defaulting to big endian.\n\n\n      var buffer = e.target.result;\n      var dataView = new DataView(buffer);\n      var offset = 2;\n      var maxOffset = dataView.byteLength - 4;\n      var headLength = offset;\n      var markerBytes;\n      var markerLength;\n      var parsers;\n      var i; // Check for the JPEG marker (0xffd8):\n\n      if (dataView.getUint16(0) === 0xffd8) {\n        while (offset < maxOffset) {\n          markerBytes = dataView.getUint16(offset); // Search for APPn (0xffeN) and COM (0xfffe) markers,\n          // which contain application-specific meta-data like\n          // Exif, ICC and IPTC data and text comments:\n\n          if (markerBytes >= 0xffe0 && markerBytes <= 0xffef || markerBytes === 0xfffe) {\n            // The marker bytes (2) are always followed by\n            // the length bytes (2), indicating the length of the\n            // marker segment, which includes the length bytes,\n            // but not the marker bytes, so we add 2:\n            markerLength = dataView.getUint16(offset + 2) + 2;\n\n            if (offset + markerLength > dataView.byteLength) {\n              // eslint-disable-next-line no-console\n              console.log('Invalid meta data: Invalid segment size.');\n              break;\n            }\n\n            parsers = loadImage.metaDataParsers.jpeg[markerBytes];\n\n            if (parsers && !options.disableMetaDataParsers) {\n              for (i = 0; i < parsers.length; i += 1) {\n                parsers[i].call(that, dataView, offset, markerLength, data, options);\n              }\n            }\n\n            offset += markerLength;\n            headLength = offset;\n          } else {\n            // Not an APPn or COM marker, probably safe to\n            // assume that this is the end of the meta data\n            break;\n          }\n        } // Meta length must be longer than JPEG marker (2)\n        // plus APPn marker (2), followed by length bytes (2):\n\n\n        if (!options.disableImageHead && headLength > 6) {\n          if (buffer.slice) {\n            data.imageHead = buffer.slice(0, headLength);\n          } else {\n            // Workaround for IE10, which does not yet\n            // support ArrayBuffer.slice:\n            data.imageHead = new Uint8Array(buffer).subarray(0, headLength);\n          }\n        }\n      } else {\n        // eslint-disable-next-line no-console\n        console.log('Invalid JPEG file: Missing JPEG marker.');\n      }\n\n      callback(data);\n    }, 'readAsArrayBuffer')) {\n      callback(data);\n    }\n  }; // Replaces the image head of a JPEG blob with the given one.\n  // Calls the callback with the new Blob:\n\n\n  loadImage.replaceHead = function (blob, head, callback) {\n    loadImage.parseMetaData(blob, function (data) {\n      callback(new Blob([head, loadImage.blobSlice.call(blob, data.imageHead.byteLength)], {\n        type: 'image/jpeg'\n      }));\n    }, {\n      maxMetaDataSize: 256,\n      disableMetaDataParsers: true\n    });\n  };\n\n  var originalTransform = loadImage.transform;\n\n  loadImage.transform = function (img, options, callback, file, data) {\n    if (loadImage.hasMetaOption(options)) {\n      loadImage.parseMetaData(file, function (data) {\n        originalTransform.call(loadImage, img, options, callback, file, data);\n      }, options, data);\n    } else {\n      originalTransform.apply(loadImage, arguments);\n    }\n  };\n});","map":{"version":3,"names":["factory","define","amd","module","exports","require","window","loadImage","hasblobSlice","Blob","prototype","slice","webkitSlice","mozSlice","blobSlice","apply","arguments","metaDataParsers","jpeg","parseMetaData","file","callback","options","data","that","maxMetaDataSize","noMetaData","DataView","size","type","readFile","call","e","target","error","console","log","buffer","result","dataView","offset","maxOffset","byteLength","headLength","markerBytes","markerLength","parsers","i","getUint16","disableMetaDataParsers","length","disableImageHead","imageHead","Uint8Array","subarray","replaceHead","blob","head","originalTransform","transform","img","hasMetaOption"],"sources":["/Users/denizyucel/Documents/GitHub/cameraApp/node_modules/blueimp-load-image/js/load-image-meta.js"],"sourcesContent":["/*\n * JavaScript Load Image Meta\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Image meta data handling implementation\n * based on the help and contribution of\n * Achim Stöhr.\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require, DataView, Uint8Array */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n})(function (loadImage) {\n  'use strict'\n\n  var hasblobSlice =\n    typeof Blob !== 'undefined' &&\n    (Blob.prototype.slice ||\n      Blob.prototype.webkitSlice ||\n      Blob.prototype.mozSlice)\n\n  loadImage.blobSlice =\n    hasblobSlice &&\n    function () {\n      var slice = this.slice || this.webkitSlice || this.mozSlice\n      return slice.apply(this, arguments)\n    }\n\n  loadImage.metaDataParsers = {\n    jpeg: {\n      0xffe1: [], // APP1 marker\n      0xffed: [] // APP13 marker\n    }\n  }\n\n  // Parses image meta data and calls the callback with an object argument\n  // with the following properties:\n  // * imageHead: The complete image head as ArrayBuffer (Uint8Array for IE10)\n  // The options argument accepts an object and supports the following\n  // properties:\n  // * maxMetaDataSize: Defines the maximum number of bytes to parse.\n  // * disableImageHead: Disables creating the imageHead property.\n  loadImage.parseMetaData = function (file, callback, options, data) {\n    // eslint-disable-next-line no-param-reassign\n    options = options || {}\n    // eslint-disable-next-line no-param-reassign\n    data = data || {}\n    var that = this\n    // 256 KiB should contain all EXIF/ICC/IPTC segments:\n    var maxMetaDataSize = options.maxMetaDataSize || 262144\n    var noMetaData = !(\n      typeof DataView !== 'undefined' &&\n      file &&\n      file.size >= 12 &&\n      file.type === 'image/jpeg' &&\n      loadImage.blobSlice\n    )\n    if (\n      noMetaData ||\n      !loadImage.readFile(\n        loadImage.blobSlice.call(file, 0, maxMetaDataSize),\n        function (e) {\n          if (e.target.error) {\n            // FileReader error\n            // eslint-disable-next-line no-console\n            console.log(e.target.error)\n            callback(data)\n            return\n          }\n          // Note on endianness:\n          // Since the marker and length bytes in JPEG files are always\n          // stored in big endian order, we can leave the endian parameter\n          // of the DataView methods undefined, defaulting to big endian.\n          var buffer = e.target.result\n          var dataView = new DataView(buffer)\n          var offset = 2\n          var maxOffset = dataView.byteLength - 4\n          var headLength = offset\n          var markerBytes\n          var markerLength\n          var parsers\n          var i\n          // Check for the JPEG marker (0xffd8):\n          if (dataView.getUint16(0) === 0xffd8) {\n            while (offset < maxOffset) {\n              markerBytes = dataView.getUint16(offset)\n              // Search for APPn (0xffeN) and COM (0xfffe) markers,\n              // which contain application-specific meta-data like\n              // Exif, ICC and IPTC data and text comments:\n              if (\n                (markerBytes >= 0xffe0 && markerBytes <= 0xffef) ||\n                markerBytes === 0xfffe\n              ) {\n                // The marker bytes (2) are always followed by\n                // the length bytes (2), indicating the length of the\n                // marker segment, which includes the length bytes,\n                // but not the marker bytes, so we add 2:\n                markerLength = dataView.getUint16(offset + 2) + 2\n                if (offset + markerLength > dataView.byteLength) {\n                  // eslint-disable-next-line no-console\n                  console.log('Invalid meta data: Invalid segment size.')\n                  break\n                }\n                parsers = loadImage.metaDataParsers.jpeg[markerBytes]\n                if (parsers && !options.disableMetaDataParsers) {\n                  for (i = 0; i < parsers.length; i += 1) {\n                    parsers[i].call(\n                      that,\n                      dataView,\n                      offset,\n                      markerLength,\n                      data,\n                      options\n                    )\n                  }\n                }\n                offset += markerLength\n                headLength = offset\n              } else {\n                // Not an APPn or COM marker, probably safe to\n                // assume that this is the end of the meta data\n                break\n              }\n            }\n            // Meta length must be longer than JPEG marker (2)\n            // plus APPn marker (2), followed by length bytes (2):\n            if (!options.disableImageHead && headLength > 6) {\n              if (buffer.slice) {\n                data.imageHead = buffer.slice(0, headLength)\n              } else {\n                // Workaround for IE10, which does not yet\n                // support ArrayBuffer.slice:\n                data.imageHead = new Uint8Array(buffer).subarray(0, headLength)\n              }\n            }\n          } else {\n            // eslint-disable-next-line no-console\n            console.log('Invalid JPEG file: Missing JPEG marker.')\n          }\n          callback(data)\n        },\n        'readAsArrayBuffer'\n      )\n    ) {\n      callback(data)\n    }\n  }\n\n  // Replaces the image head of a JPEG blob with the given one.\n  // Calls the callback with the new Blob:\n  loadImage.replaceHead = function (blob, head, callback) {\n    loadImage.parseMetaData(\n      blob,\n      function (data) {\n        callback(\n          new Blob(\n            [head, loadImage.blobSlice.call(blob, data.imageHead.byteLength)],\n            { type: 'image/jpeg' }\n          )\n        )\n      },\n      { maxMetaDataSize: 256, disableMetaDataParsers: true }\n    )\n  }\n\n  var originalTransform = loadImage.transform\n  loadImage.transform = function (img, options, callback, file, data) {\n    if (loadImage.hasMetaOption(options)) {\n      loadImage.parseMetaData(\n        file,\n        function (data) {\n          originalTransform.call(loadImage, img, options, callback, file, data)\n        },\n        options,\n        data\n      )\n    } else {\n      originalTransform.apply(loadImage, arguments)\n    }\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}