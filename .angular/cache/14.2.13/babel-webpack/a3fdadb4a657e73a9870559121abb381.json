{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/denizyucel/Documents/GitHub/cameraApp/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst resolveURL = require('resolve-url');\n\nconst blueimpLoadImage = require('blueimp-load-image');\n/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\n\n\nconst readFromBlobOrFile = blob => new Promise((resolve, reject) => {\n  const fileReader = new FileReader();\n\n  fileReader.onload = () => {\n    resolve(fileReader.result);\n  };\n\n  fileReader.onerror = ({\n    target: {\n      error: {\n        code\n      }\n    }\n  }) => {\n    reject(Error(`File could not be read! Code=${code}`));\n  };\n\n  fileReader.readAsArrayBuffer(blob);\n});\n\nconst fixOrientationFromUrlOrBlobOrFile = blob => new Promise(resolve => {\n  blueimpLoadImage(blob, img => img.toBlob(resolve), {\n    orientation: true,\n    canvas: true\n  });\n});\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\n\n\nconst loadImage = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (image) {\n    let data = image;\n\n    if (typeof image === 'undefined') {\n      return 'undefined';\n    }\n\n    if (typeof image === 'string') {\n      if (image.endsWith('.pbm')) {\n        const resp = yield fetch(resolveURL(image));\n        data = yield resp.arrayBuffer();\n      } else {\n        let img = image; // If not Base64 Image\n\n        if (!/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n          img = resolveURL(image);\n        }\n\n        data = yield readFromBlobOrFile(yield fixOrientationFromUrlOrBlobOrFile(img));\n      }\n    } else if (image instanceof HTMLElement) {\n      if (image.tagName === 'IMG') {\n        data = yield loadImage(image.src);\n      }\n\n      if (image.tagName === 'VIDEO') {\n        data = yield loadImage(image.poster);\n      }\n\n      if (image.tagName === 'CANVAS') {\n        yield new Promise(resolve => {\n          image.toBlob( /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator(function* (blob) {\n              data = yield readFromBlobOrFile(blob);\n              resolve();\n            });\n\n            return function (_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }());\n        });\n      }\n    } else if (image instanceof File || image instanceof Blob) {\n      let img = image;\n\n      if (!image.name.endsWith('.pbm')) {\n        img = yield fixOrientationFromUrlOrBlobOrFile(img);\n      }\n\n      data = yield readFromBlobOrFile(img);\n    }\n\n    return new Uint8Array(data);\n  });\n\n  return function loadImage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = loadImage;","map":{"version":3,"names":["resolveURL","require","blueimpLoadImage","readFromBlobOrFile","blob","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","target","error","code","Error","readAsArrayBuffer","fixOrientationFromUrlOrBlobOrFile","img","toBlob","orientation","canvas","loadImage","image","data","endsWith","resp","fetch","arrayBuffer","test","HTMLElement","tagName","src","poster","File","Blob","name","Uint8Array","module","exports"],"sources":["/Users/denizyucel/Documents/GitHub/cameraApp/node_modules/tesseract.js/src/worker/browser/loadImage.js"],"sourcesContent":["const resolveURL = require('resolve-url');\nconst blueimpLoadImage = require('blueimp-load-image');\n\n/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\nconst readFromBlobOrFile = (blob) => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\nconst fixOrientationFromUrlOrBlobOrFile = (blob) => (\n  new Promise((resolve) => {\n    blueimpLoadImage(\n      blob,\n      (img) => img.toBlob(resolve),\n      {\n        orientation: true,\n        canvas: true,\n      },\n    );\n  })\n);\n\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\nconst loadImage = async (image) => {\n  let data = image;\n  if (typeof image === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof image === 'string') {\n    if (image.endsWith('.pbm')) {\n      const resp = await fetch(resolveURL(image));\n      data = await resp.arrayBuffer();\n    } else {\n      let img = image;\n      // If not Base64 Image\n      if (!/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n        img = resolveURL(image);\n      }\n      data = await readFromBlobOrFile(\n        await fixOrientationFromUrlOrBlobOrFile(img),\n      );\n    }\n  } else if (image instanceof HTMLElement) {\n    if (image.tagName === 'IMG') {\n      data = await loadImage(image.src);\n    }\n    if (image.tagName === 'VIDEO') {\n      data = await loadImage(image.poster);\n    }\n    if (image.tagName === 'CANVAS') {\n      await new Promise((resolve) => {\n        image.toBlob(async (blob) => {\n          data = await readFromBlobOrFile(blob);\n          resolve();\n        });\n      });\n    }\n  } else if (image instanceof File || image instanceof Blob) {\n    let img = image;\n    if (!image.name.endsWith('.pbm')) {\n      img = await fixOrientationFromUrlOrBlobOrFile(img);\n    }\n    data = await readFromBlobOrFile(img);\n  }\n\n  return new Uint8Array(data);\n};\n\nmodule.exports = loadImage;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}