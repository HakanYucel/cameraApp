{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/denizyucel/Documents/GitHub/cameraApp/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst createWorker = require('./createWorker');\n\nconst recognize = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (image, langs, options) {\n    const worker = createWorker(options);\n    yield worker.load();\n    yield worker.loadLanguage(langs);\n    yield worker.initialize(langs);\n    return worker.recognize(image).finally( /*#__PURE__*/_asyncToGenerator(function* () {\n      yield worker.terminate();\n    }));\n  });\n\n  return function recognize(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst detect = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (image, options) {\n    const worker = createWorker(options);\n    yield worker.load();\n    yield worker.loadLanguage('osd');\n    yield worker.initialize('osd');\n    return worker.detect(image).finally( /*#__PURE__*/_asyncToGenerator(function* () {\n      yield worker.terminate();\n    }));\n  });\n\n  return function detect(_x4, _x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  recognize,\n  detect\n};","map":{"version":3,"names":["createWorker","require","recognize","image","langs","options","worker","load","loadLanguage","initialize","finally","terminate","detect","module","exports"],"sources":["/Users/denizyucel/Documents/GitHub/cameraApp/node_modules/tesseract.js/src/Tesseract.js"],"sourcesContent":["const createWorker = require('./createWorker');\n\nconst recognize = async (image, langs, options) => {\n  const worker = createWorker(options);\n  await worker.load();\n  await worker.loadLanguage(langs);\n  await worker.initialize(langs);\n  return worker.recognize(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nconst detect = async (image, options) => {\n  const worker = createWorker(options);\n  await worker.load();\n  await worker.loadLanguage('osd');\n  await worker.initialize('osd');\n  return worker.detect(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nmodule.exports = {\n  recognize,\n  detect,\n};\n"],"mappings":";;AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AAEA,MAAMC,SAAS;EAAA,6BAAG,WAAOC,KAAP,EAAcC,KAAd,EAAqBC,OAArB,EAAiC;IACjD,MAAMC,MAAM,GAAGN,YAAY,CAACK,OAAD,CAA3B;IACA,MAAMC,MAAM,CAACC,IAAP,EAAN;IACA,MAAMD,MAAM,CAACE,YAAP,CAAoBJ,KAApB,CAAN;IACA,MAAME,MAAM,CAACG,UAAP,CAAkBL,KAAlB,CAAN;IACA,OAAOE,MAAM,CAACJ,SAAP,CAAiBC,KAAjB,EACJO,OADI,iCACI,aAAY;MACnB,MAAMJ,MAAM,CAACK,SAAP,EAAN;IACD,CAHI,EAAP;EAID,CATc;;EAAA,gBAATT,SAAS;IAAA;EAAA;AAAA,GAAf;;AAWA,MAAMU,MAAM;EAAA,8BAAG,WAAOT,KAAP,EAAcE,OAAd,EAA0B;IACvC,MAAMC,MAAM,GAAGN,YAAY,CAACK,OAAD,CAA3B;IACA,MAAMC,MAAM,CAACC,IAAP,EAAN;IACA,MAAMD,MAAM,CAACE,YAAP,CAAoB,KAApB,CAAN;IACA,MAAMF,MAAM,CAACG,UAAP,CAAkB,KAAlB,CAAN;IACA,OAAOH,MAAM,CAACM,MAAP,CAAcT,KAAd,EACJO,OADI,iCACI,aAAY;MACnB,MAAMJ,MAAM,CAACK,SAAP,EAAN;IACD,CAHI,EAAP;EAID,CATW;;EAAA,gBAANC,MAAM;IAAA;EAAA;AAAA,GAAZ;;AAWAC,MAAM,CAACC,OAAP,GAAiB;EACfZ,SADe;EAEfU;AAFe,CAAjB"},"metadata":{},"sourceType":"script"}