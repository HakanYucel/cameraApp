{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/denizyucel/Documents/GitHub/cameraApp/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst resolvePaths = require('./utils/resolvePaths');\n\nconst circularize = require('./utils/circularize');\n\nconst createJob = require('./createJob');\n\nconst {\n  log\n} = require('./utils/log');\n\nconst getId = require('./utils/getId');\n\nconst {\n  defaultOEM\n} = require('./constants/config');\n\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = (_options = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({ ...defaultOptions,\n    ..._options\n  });\n  const resolves = {};\n  const rejects = {};\n  let worker = spawnWorker(options);\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({\n    id: jobId,\n    action,\n    payload\n  }) => new Promise((resolve, reject) => {\n    log(`[${id}]: Start ${jobId}, action=${action}`);\n    setResolve(action, resolve);\n    setReject(action, reject);\n    send(worker, {\n      workerId: id,\n      jobId,\n      action,\n      payload\n    });\n  });\n\n  const load = jobId => startJob(createJob({\n    id: jobId,\n    action: 'load',\n    payload: {\n      options\n    }\n  }));\n\n  const writeText = (path, text, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method: 'writeFile',\n      args: [path, text]\n    }\n  }));\n\n  const readText = (path, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method: 'readFile',\n      args: [path, {\n        encoding: 'utf8'\n      }]\n    }\n  }));\n\n  const removeFile = (path, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method: 'unlink',\n      args: [path]\n    }\n  }));\n\n  const FS = (method, args, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method,\n      args\n    }\n  }));\n\n  const loadLanguage = (langs = 'eng', jobId) => startJob(createJob({\n    id: jobId,\n    action: 'loadLanguage',\n    payload: {\n      langs,\n      options\n    }\n  }));\n\n  const initialize = (langs = 'eng', oem = defaultOEM, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'initialize',\n    payload: {\n      langs,\n      oem\n    }\n  }));\n\n  const setParameters = (params = {}, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'setParameters',\n    payload: {\n      params\n    }\n  }));\n\n  const recognize = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (image, opts = {}, jobId) {\n      return startJob(createJob({\n        id: jobId,\n        action: 'recognize',\n        payload: {\n          image: yield loadImage(image),\n          options: opts\n        }\n      }));\n    });\n\n    return function recognize(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'getPDF',\n    payload: {\n      title,\n      textonly\n    }\n  }));\n\n  const detect = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* (image, jobId) {\n      return startJob(createJob({\n        id: jobId,\n        action: 'detect',\n        payload: {\n          image: yield loadImage(image)\n        }\n      }));\n    });\n\n    return function detect(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  const terminate = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      if (worker !== null) {\n        /*\n        await startJob(createJob({\n          id: jobId,\n          action: 'terminate',\n        }));\n        */\n        terminateWorker(worker);\n        worker = null;\n      }\n\n      return Promise.resolve();\n    });\n\n    return function terminate() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  onMessage(worker, ({\n    workerId,\n    jobId,\n    status,\n    action,\n    data\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data,\n          length: Object.keys(data).length\n        });\n      }\n\n      resolves[action]({\n        jobId,\n        data: d\n      });\n    } else if (status === 'reject') {\n      rejects[action](data);\n\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({ ...data,\n        userJobId: jobId\n      });\n    }\n  });\n  return {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate\n  };\n};","map":{"version":3,"names":["resolvePaths","require","circularize","createJob","log","getId","defaultOEM","defaultOptions","spawnWorker","terminateWorker","onMessage","loadImage","send","workerCounter","module","exports","_options","id","logger","errorHandler","options","resolves","rejects","worker","setResolve","action","res","setReject","rej","startJob","jobId","payload","Promise","resolve","reject","workerId","load","writeText","path","text","method","args","readText","encoding","removeFile","FS","loadLanguage","langs","initialize","oem","setParameters","params","recognize","image","opts","getPDF","title","textonly","detect","terminate","status","data","d","Array","from","length","Object","keys","Error","userJobId"],"sources":["/Users/denizyucel/Documents/GitHub/cameraApp/node_modules/tesseract.js/src/createWorker.js"],"sourcesContent":["const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\nconst { defaultOEM } = require('./constants/config');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send,\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = (_options = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const resolves = {};\n  const rejects = {};\n  let worker = spawnWorker(options);\n\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      setResolve(action, resolve);\n      setReject(action, reject);\n      send(worker, {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      });\n    })\n  );\n\n  const load = (jobId) => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options },\n    }))\n  );\n\n  const writeText = (path, text, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'writeFile', args: [path, text] },\n    }))\n  );\n\n  const readText = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'readFile', args: [path, { encoding: 'utf8' }] },\n    }))\n  );\n\n  const removeFile = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'unlink', args: [path] },\n    }))\n  );\n\n  const FS = (method, args, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method, args },\n    }))\n  );\n\n  const loadLanguage = (langs = 'eng', jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'loadLanguage',\n      payload: { langs, options },\n    }))\n  );\n\n  const initialize = (langs = 'eng', oem = defaultOEM, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: { langs, oem },\n    }))\n  );\n\n  const setParameters = (params = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: { params },\n    }))\n  );\n\n  const recognize = async (image, opts = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'recognize',\n      payload: { image: await loadImage(image), options: opts },\n    }))\n  );\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: { title, textonly },\n    }))\n  );\n\n  const detect = async (image, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: { image: await loadImage(image) },\n    }))\n  );\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, status, action, data,\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data, length: Object.keys(data).length });\n      }\n      resolves[action]({ jobId, data: d });\n    } else if (status === 'reject') {\n      rejects[action](data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({ ...data, userJobId: jobId });\n    }\n  });\n\n  return {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}